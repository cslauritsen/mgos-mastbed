author: mongoose-os
description: A Mongoose OS app skeleton
version: 0.1.1

libs_version: ${mos.version}
modules_version: ${mos.version}
mongoose_os_version: ${mos.version}

# Optional. List of tags for online search.
tags:
  - c

# List of files / directories with C sources. No slashes at the end of dir names.
sources:
  - src

# List of dirs. Files from these dirs will be copied to the device filesystem
filesystem:
  - fs

# Custom configuration entries, settable via "device configuration"
# Below is a custom firmware configuration example.
# Uncomment and modify according to your needs:

config_schema:
  # the project.name should denote function, not location
  # but since I"ve already set it up in openhab i'm not going to change it in this project
  #- ["project.name", "s", "motion-temp", {title: "Project Name"}]
  - ["project.name", "s", "mastbed", {title: "Project Name"}]
  - ["garage", "o", {title: "My app custom settings"}]
  - ["garage.bool_value", "b", false, {title: "Some boolean value"}]
  - ["project.string_value", "s", "", {title: "Some string value"}]
  - ["project.int_value", "i", 123, {title: "Some integer value"}]
  - ["pins.dht", "i", 0, {title: "DHT GPIO Pin"}]
  - ["pins.pir", "i", 1, {title: "PIR Motion Sensor GPIO Pin"}]
  - ["project.mqttPubInterval", "i", 60, {title: "How many seconds between MQTT publications"}]
  - ["homie.pubinterval", "i",  200, { title: "Millis to wait before sending another homie cfg msg"}]
  - ["mqtt.server", "s",  "192.168.1.5", { title: "MQTT Server"} ]
  - ["mqtt.will_topic", "s",  "homie/${device.id}/$state", { title: "MQTT LWT message topic prescribed by Homie 4.0 spec"} ]
  - ["mqtt.will_message", "s",  "lost", { title: "MQTT LWT message prescribed by Homie 4.0 spec"} ]
  - ["mqtt.will_retain", "b",  true, { title: "MQTT LWT retention flag"} ]
  - ["mqtt.enable", "b",  true, { title: "MQTT enabled"} ]
  - ["mqtt.max_unsent", "i",  35, { title: "Max unsent bytes before sending again"}]
  - ["time.main_loop_millis", "i",  60000, { title: "Interval between main loop iterations and network transmissions"} ]
  - ["rpc.mqtt.enable", "b",  true, { title: "MQTT RPC enabled"} ]
  - ["debug.udp_log_addr", "s",  "192.168.1.5:31338", { title: "UDP log target"} ]

# These settings get compiled into the C structure, and can be accessed
# from the C code this way:
#
# printf("Hello from %s!\n", mgos_sys_config_get_device_id());
#
# Settings are cool: can be modified remotely without full firmware upgrade!
#
# To see all available compiled settings, buid the firmware and open
# build/gen/mgos_config.h file.
#
# Also, in this config_schema section, you can override existing
# settings that has been created by other libraries. For example, debug log
# level is 2 by default. For this firmware we can override it to 3:
#
# config_schema:
#  - ["debug.level", 3]

libs:
  - origin: https://github.com/mongoose-os-libs/boards
  - origin: https://github.com/mongoose-os-libs/ca-bundle
  - origin: https://github.com/mongoose-os-libs/rpc-service-config
  - origin: https://github.com/mongoose-os-libs/rpc-service-fs
  - origin: https://github.com/mongoose-os-libs/rpc-service-ota
  - origin: https://github.com/mongoose-os-libs/rpc-uart
  - origin: https://github.com/mongoose-os-libs/rpc-mqtt
  - origin: https://github.com/mongoose-os-libs/wifi
  - origin: https://github.com/mongoose-os-libs/dht
  - origin: https://github.com/mongoose-os-libs/mjs
  - origin: https://github.com/mongoose-os-libs/http-server
  - origin: https://github.com/mongoose-os-libs/ota-http-server 
  - origin: https://github.com/mongoose-os-libs/mqtt
  - origin: https://github.com/mongoose-os-libs/dash
  - origin: https://github.com/mongoose-os-libs/sensor-utils
  - origin: https://github.com/mongoose-os-libs/adc

# Used by the mos tool to catch mos binaries incompatible with this file format
manifest_version: 2017-09-29
